buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"
    }
}

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'codenarc'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
	flatDir(dirs: file('lib'))
}

//manifest.mainAttributes("Main-Class" : "org.wallerlab.swy.Launch")

jar { from { configurations.compile.collect { it.isDirectory() ? it :  zipTree(it)}}}

dependencies {

	final SPRING_VERSION= '3.1.1.RELEASE'
	final SPRING_BATCH = '2.1.8.RELEASE'
	final SPOCK_VERSION = '0.6-groovy-1.8'

	compile 'org.codehaus.groovy:groovy:1.8.6'

	compile 'asm:asm:3.3.1'
	compile 'log4j:log4j:1.2.16'
	compile 'com.h2database:h2:1.3.165'
	compile 'cglib:cglib-nodep:2.2.2'
	compile 'aopalliance:aopalliance:1.0'
	compile 'org.glassfish:javax.jms:10.0-b28'
	compile 'commons-dbcp:commons-dbcp:1.4'
	compile 'commons-logging:commons-logging:1.1.1'
	compile 'org.aspectj:aspectjtools:1.6.2'
	compile 'org.aspectj:aspectjweaver:1.6.12'
	compile 'uk.com.robust-it:cloning:1.7.9'
	compile 'org.objenesis:objenesis:1.2'
	compile 'postgresql:postgresql:9.1-901.jdbc4'
	compile 'javax.persistence:persistence-api:1.0-rev-1'
	compile	'commons-beanutils:commons-beanutils:1.8.3'
	compile 'nz.ac.waikato.cms.weka:weka-stable:3.6.7'
	compile 'org.dmilne:weka-wrapper:0.0.1'
	compile 'org.apache.activemq:activemq-all:5.4.2'
	compile 'commons-io:commons-io:2.3'

	compile 'org.springframework:spring-core:3.1.1.RELEASE'
	compile 'org.springframework:spring-aop:3.1.1.RELEASE'
	compile 'org.springframework:spring-beans:3.1.1.RELEASE'
	compile 'org.springframework:spring-tx:3.1.1.RELEASE'
	compile 'org.springframework:spring-jdbc:3.1.1.RELEASE'
	compile 'org.springframework:spring-jms:3.1.1.RELEASE'
	compile 'org.springframework:spring-orm:3.1.1.RELEASE'
	compile 'org.springframework:spring-oxm:3.1.1.RELEASE'

	compile 'org.springframework.batch:spring-batch-core:2.1.8.RELEASE'
	compile 'org.springframework.batch:spring-batch-infrastructure:2.1.8.RELEASE'

	runtime fileTree(dir: 'libs', includes: ['*.jar'])

	testCompile 'junit:junit:4.7'
	testCompile 'org.springframework:spring-test:3.1.1.RELEASE'
	testCompile 'org.spockframework:spock-core:0.6-groovy-1.8'
	testCompile 'org.spockframework:spock-spring:0.6-groovy-1.8'
	testCompile 'org.springframework.batch:spring-batch-test:2.1.8.RELEASE'
}


mainClassName = 'org.wallerlab.swy.Launch'

run { args 'src/test/resources/inputfiles/aco_dihed_mop_trien.properties' }


task wrapper(type: Wrapper) { gradleVersion = '1.0-milestone-9' }

groovydoc {
	docTitle="Groovydoc for the swy program (version: 0.1).<br>\
<h4>If you get lost, go to the <A HREF='org/wallerlab/swy/Swy.html'>main class</A> \
or the <A HREF='org/wallerlab/swy/configuration/package-summary.html'>configuration classes</A>.</h4>"
}

codenarc {
	toolVersion = '0.17'
	configFile = new File("${project.projectDir.absolutePath}/gradle/codenarc/ruleset.groovy")

	// don't let codenarc violations stop the build
	tasks.withType(CodeNarc).all { codeNarcTask ->
		codeNarcTask.ignoreFailures = true
	}
}


task createWrapper(type: Wrapper) { gradleVersion = '3.0' }


jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/pdbml/**'])
        })
    }
}

coveralls {
  sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
  jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}
